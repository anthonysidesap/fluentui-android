trigger: none
name: $(Date:yyyyMMdd).$(Rev:r)

resources:
  pipelines:
    - pipeline: "fluentui-android-maven-publish"
      project: "ISS"
      source: "fluentui-maven-central-publish [1es-pt]"
  repositories:
    - repository: OfficePipelineTemplates
      type: git
      name: 1ESPipelineTemplates/OfficePipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/Office.Official.PipelineTemplate.yml@OfficePipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    customBuildTags:
      - ES365AIMigrationTooling-Release
    stages:
      - stage: Stage_1
        displayName: GitHub Release
        jobs:
          - job: Job_1
            displayName: Agent job
            condition: succeeded()
            timeoutInMinutes: 0
            templateContext:
              type: releaseJob
              isProduction: true
              inputs:
                - input: pipelineArtifact
                  buildType: "specific"
                  project: "$(projectName)"
                  definition: "$(pipelineDefinition)"
                  buildVersionToDownload: "specific"
                  pipelineId: "$(buildId)"
                  artifactName: "dogfood"
                  targetPath: "$(Pipeline.Workspace)/fluentui-android-maven-publish/dogfood"
                - input: pipelineArtifact
                  buildType: "specific"
                  project: "$(projectName)"
                  definition: "$(pipelineDefinition)"
                  buildVersionToDownload: "specific"
                  pipelineId: "$(buildId)"
                  artifactName: "notes"
                  targetPath: "$(Pipeline.Workspace)/fluentui-android-maven-publish/notes"
            steps:
              # Prepare release notes for GitHub release
              - task: PowerShell@2
                displayName: "Prepare Release Notes"
                inputs:
                  targetType: "inline"
                  script: |
                    $sourceNotesPath = "$(Pipeline.Workspace)/fluentui-android-maven-publish/notes/dogfood-release-notes.txt"
                    $tempNotesPath = "$(Agent.TempDirectory)/github-release-notes.md"

                    # Function to format release notes with markdown
                    function Format-ReleaseNotesMarkdown {
                        param([string]$content, [string]$version)

                        $lines = $content -split "`r?`n"
                        $formattedLines = @()

                        $currentSection = ""
                        $currentFluentVersion = ""
                        $listItemNumber = 1
                        $numberedItems = @()

                        # Helper function to output code block with collected items
                        function Add-CodeBlock {
                            param($items, $outputLines)
                            if ($items.Count -gt 0) {
                                $outputLines.Add("``````")
                                foreach ($item in $items) {
                                    $outputLines.Add("    $item")
                                }
                                $outputLines.Add("``````")
                                $outputLines.Add("")
                                return @()  # Return empty array to clear items
                            }
                            return $items
                        }

                        # Convert to ArrayList for better performance
                        $formattedLines = [System.Collections.ArrayList]@()

                        foreach ($line in $lines) {
                            $trimmedLine = $line.Trim()

                            # Handle first line - format as release version header if it contains version info
                            if ($formattedLines.Count -eq 0 -and $trimmedLine) {
                                if ($trimmedLine -match "Release Version|Version") {
                                    $formattedLines.Add("### $trimmedLine") | Out-Null
                                } else {
                                    $formattedLines.Add("### Release Version ${version}:") | Out-Null
                                }
                                $formattedLines.Add("") | Out-Null
                                continue
                            }

                            # Skip empty lines at the beginning
                            if (-not $trimmedLine -and $formattedLines.Count -le 2) {
                                continue
                            }

                            # Detect section headers (What's new, Fix/enhancement, etc.)
                            if ($trimmedLine -match "^(What's new|Fix/enhancement|Note|Notes?)$") {
                                $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines
                                $formattedLines.Add("### $trimmedLine") | Out-Null
                                $formattedLines.Add("") | Out-Null  # Add blank line after section header
                                $currentSection = $trimmedLine
                                $listItemNumber = 1
                                continue
                            }

                            # Detect Fluent version headers
                            if ($trimmedLine -match "^Fluent v[12]:?$") {
                                $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines
                                $formattedLines.Add("**$trimmedLine**  ") | Out-Null
                                $currentFluentVersion = $trimmedLine
                                continue
                            }

                            # Detect subsection headers like "Fix/enhancement" under Fluent versions
                            if ($trimmedLine -match "^(Fix/enhancement|Enhancement|Bug fixes?)$" -and $currentFluentVersion) {
                                $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines
                                $formattedLines.Add("**$trimmedLine**  ") | Out-Null
                                $formattedLines.Add("") | Out-Null
                                $listItemNumber = 1
                                continue
                            }

                            # Handle numbered list items (lines starting with numbers)
                            if ($trimmedLine -match "^\d+\.\s*(.+)$") {
                                $itemText = $matches[1]
                                $numberedItems += "$listItemNumber. $itemText"
                                $listItemNumber++
                                Write-Host "DEBUG: Added numbered item: $listItemNumber. $itemText"
                                continue
                            }

                            # Handle bullet points or dashes
                            if ($trimmedLine -match "^[-â€¢]\s*(.+)$") {
                                $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines
                                $itemText = $matches[1]
                                $formattedLines.Add("- $itemText") | Out-Null
                                continue
                            }

                            # Handle "None" responses
                            if ($trimmedLine -eq "None") {
                                $formattedLines.Add("``````") | Out-Null
                                $formattedLines.Add("    None") | Out-Null
                                $formattedLines.Add("``````") | Out-Null
                                $formattedLines.Add("") | Out-Null
                                continue
                            }

                            # Handle regular content lines
                            if ($trimmedLine) {
                                # If it looks like a standalone statement under Fix/enhancement, treat it as a list item
                                if ($currentSection -eq "Fix/enhancement" -and $currentFluentVersion -and $trimmedLine -notmatch "^(Fluent|Note|What's|Fix/enhancement)" -and $trimmedLine -ne "None") {
                                    $numberedItems += "$listItemNumber. $trimmedLine"
                                    $listItemNumber++
                                    Write-Host "DEBUG: Added content as numbered item: $listItemNumber. $trimmedLine"
                                } else {
                                    $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines
                                    $formattedLines.Add($trimmedLine) | Out-Null
                                }
                            } else {
                                # Close code block on empty lines and preserve spacing
                                $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines
                                $formattedLines.Add("") | Out-Null
                            }
                        }

                        # Close any remaining code block at the end
                        $numberedItems = Add-CodeBlock -items $numberedItems -outputLines $formattedLines

                        Write-Host "DEBUG: Final formatted lines count: $($formattedLines.Count)"
                        Write-Host "DEBUG: Final numbered items count: $($numberedItems.Count)"

                        return $formattedLines -join "`n"
                    }

                    # Read and format the release notes
                    if (Test-Path $sourceNotesPath) {
                        $originalContent = Get-Content -Path $sourceNotesPath -Raw
                        Write-Host "Original release notes content:"
                        Write-Host $originalContent
                        Write-Host "---"

                        # Format the content with markdown
                        $formattedContent = Format-ReleaseNotesMarkdown -content $originalContent -version "$(releaseVersion)"

                        # Write formatted content to temporary file
                        $formattedContent | Out-File -FilePath $tempNotesPath -Encoding UTF8 -NoNewline

                        Write-Host "Formatted release notes:"
                        Write-Host $formattedContent
                        Write-Host "---"
                        Write-Host "Release notes file prepared successfully at: $tempNotesPath"
                        Write-Host "Formatted content length: $($formattedContent.Length) characters"

                        # Set the file path as a variable for the GitHub release task
                        Write-Host "##vso[task.setvariable variable=ReleaseNotesFilePath]$tempNotesPath"
                    } else {
                        Write-Error "Release notes file not found at: $sourceNotesPath"
                        exit 1
                    }

              # Rename APK file for better asset naming
              - task: PowerShell@2
                displayName: "Rename APK Asset"
                inputs:
                  targetType: "inline"
                  script: |
                    $sourceApk = "$(Pipeline.Workspace)/fluentui-android-maven-publish/dogfood/FluentUI.Demo-dogfood-release.apk"
                    $targetApk = "$(Agent.TempDirectory)/Fluent UI Demo v$(releaseVersion).apk"

                    if (Test-Path $sourceApk) {
                        Copy-Item -Path $sourceApk -Destination $targetApk -Force
                        Write-Host "APK renamed successfully: $targetApk"
                        Write-Host "##vso[task.setvariable variable=RenamedApkPath]$targetApk"
                    } else {
                        Write-Error "Source APK not found at: $sourceApk"
                        exit 1
                    }

              - task: GitHubRelease@1
                displayName: "Create GitHub Release"
                inputs:
                  gitHubConnection: "$(githubServiceConnectionName)"
                  repositoryName: "microsoft/fluentui-android"
                  action: "create"
                  target: "$(Build.SourceVersion)"
                  tagSource: "userSpecifiedTag"
                  tag: "v$(releaseVersion)"
                  title: "Release version $(releaseVersion)"
                  releaseNotesSource: "filePath"
                  releaseNotesFilePath: "$(ReleaseNotesFilePath)"
                  assets: "$(RenamedApkPath)"
                  addChangeLog: false
                  isPreRelease: false
